resourceprefixAWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
  billing-app

Globals:
  Function:
    Timeout: 60
    Runtime: nodejs18.x
    Tags:
      Project: !Ref Project
      Environment: !Ref Environment

Mappings:
  EnvironmentConfig:
    local:
      resourceprefix: 'local-'
      subscriptionPlanTableName: 'local-subscription-plan'
      customerTableName: 'local-customer'
      invoiceTableName: 'local-invoice'
      paymentTableName: 'local-payment'
    dev:
      resourceprefix: 'dev-'
      subscriptionPlanTableName: 'dev-subscription-plan'
      customerTableName: 'dev-customer'
      invoiceTableName: 'dev-invoice'
      paymentTableName: 'dev-payment'
    prod:
      resourceprefix: 'prod-'
      subscriptionPlanTableName: 'prod-subscription-plan'
      customerTableName: 'prod-customer'
      invoiceTableName: 'prod-invoice'
      paymentTableName: 'prod-payment'

Parameters:
  Environment:
    Type: String
    Description: Available deployment environments
    AllowedValues:
      - local
      - dev
      - prod
  Project:
    Description: This tag will be used to identify the application to which the resources belong to.
    Type: String
    Default: BillingAPI
  DynamoDBEndpoint:
    Type: AWS::SSM::Parameter::Value<String>
    Description: Dynamo DB Endpoint to save the details

Resources:
  BillingAPI:
    Type: AWS::Serverless::Api
    Properties:
      StageName: !Sub '${Environment}'
      Name:
        !Join [
          '',
          [
            !FindInMap [EnvironmentConfig, !Ref Environment, resourceprefix],
            'billing-api',
          ],
        ]
      Tags:
        Project: !Ref Project
        Environment: !Ref Environment

  CreateSubscriptionPlanFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: build/create-subscription-plan
      Handler: index.handler
      Runtime: nodejs20.x
      FunctionName:
        !Join [
          '',
          [
            !FindInMap [EnvironmentConfig, !Ref Environment, resourceprefix],
            'create-subscription-plan',
          ],
        ]
      Events:
        SubscriptionPlan:
          Type: Api
          Properties:
            Path: /subscription-plans
            Method: post
      Environment:
        Variables:
          DynamoDBEndpoint: !Sub '${DynamoDBEndpoint}'
          SubscriptionPlanTableName:
            !FindInMap [EnvironmentConfig, !Ref Environment, subscriptionPlanTableName]
      Policies:
        - AWSLambdaBasicExecutionRole
        - DynamoDBWritePolicy:
            TableName:
              !FindInMap [EnvironmentConfig, !Ref Environment, subscriptionPlanTableName]
        - DynamoDBReadPolicy:
            TableName:
              !FindInMap [EnvironmentConfig, !Ref Environment, subscriptionPlanTableName]

  AssignSubscriptionPlanFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: build/assign-subscription-plan-to-customer
      Handler: index.handler
      Runtime: nodejs20.x
      FunctionName:
        !Join [
          '',
          [
            !FindInMap [EnvironmentConfig, !Ref Environment, resourceprefix],
            'assign-subscription-plan-to-customer',
          ],
        ]
      Events:
        SubscriptionPlan:
          Type: Api
          Properties:
            Path: /customer/{id}/subscription-plan
            Method: post
      Environment:
        Variables:
          DynamoDBEndpoint: !Sub '${DynamoDBEndpoint}'
          SubscriptionPlanTableName:
            !FindInMap [EnvironmentConfig, !Ref Environment, subscriptionPlanTableName]
          CustomerTableName:
            !FindInMap [EnvironmentConfig, !Ref Environment, customerTableName]
      Policies:
        - AWSLambdaBasicExecutionRole
        - DynamoDBWritePolicy:
            TableName:
              !FindInMap [EnvironmentConfig, !Ref Environment, subscriptionPlanTableName]
        - DynamoDBReadPolicy:
            TableName:
              !FindInMap [EnvironmentConfig, !Ref Environment, subscriptionPlanTableName]
        - DynamoDBWritePolicy:
            TableName:
              !FindInMap [EnvironmentConfig, !Ref Environment, customerTableName]
        - DynamoDBReadPolicy:
            TableName:
              !FindInMap [EnvironmentConfig, !Ref Environment, customerTableName]

  ProcessPaymentFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: build/process-payment
      Handler: index.handler
      Runtime: nodejs20.x
      FunctionName:
        !Join [
          '',
          [
            !FindInMap [EnvironmentConfig, !Ref Environment, resourceprefix],
            'process-payment',
          ],
        ]
      Events:
        SubscriptionPlan:
          Type: Api
          Properties:
            Path: /customer/{id}/payments
            Method: post
      Environment:
        Variables:
          DynamoDBEndpoint: !Sub '${DynamoDBEndpoint}'
          InvoiceTableName:
            !FindInMap [EnvironmentConfig, !Ref Environment, invoiceTableName]
          PaymentTableName:
            !FindInMap [EnvironmentConfig, !Ref Environment, paymentTableName]
      Policies:
        - AWSLambdaBasicExecutionRole
        - DynamoDBWritePolicy:
            TableName:
              !FindInMap [EnvironmentConfig, !Ref Environment, invoiceTableName]
        - DynamoDBReadPolicy:
            TableName:
              !FindInMap [EnvironmentConfig, !Ref Environment, invoiceTableName]
        - DynamoDBWritePolicy:
            TableName:
              !FindInMap [EnvironmentConfig, !Ref Environment, paymentTableName]
        - DynamoDBReadPolicy:
            TableName:
              !FindInMap [EnvironmentConfig, !Ref Environment, paymentTableName]

  PaymentRetrySNSTopic:
    Type: 'AWS::SNS::Topic'
    Properties:
      DisplayName: 'Payment Retry SNS Topic'
      TopicName: "${Environment}:payment-retry-sns-topic"
      Tags:
        - Key: Project
          Value: !Ref Project
        - Key: Environment
          Value: !Ref Environment

  PaymentRetryQueue:
    Type: AWS::SQS::Queue
    Properties:
      Tags:
        - Key: Project
          Value: !Ref Project
        - Key: Environment
          Value: !Ref Environment
      FifoQueue: true
      QueueName: "${Environment}:payment-retry-queue"

  PaymentRetryQueuePolicy:
    Type: AWS::SQS::QueuePolicy
    Properties:
      Queues:
        - !Ref PaymentRetryQueue
      PolicyDocument:
        Version: "2012-10-17"
        Id: PaymentRetryQueuePolicy
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - sns.amazonaws.com
            Action:
              - sqs:SendMessage
            Resource:
              - !GetAtt PaymentRetryQueue.Arn
            Condition:
              ArnEquals:
                aws:SourceArn:
                  Fn::ImportValue: !Sub "${Environment}:payment-retry-sns-topic"

  PaymentRetrySubscription:
    Type: AWS::SNS::Subscription
    Properties:
      Protocol: sqs
      Endpoint: !GetAtt PaymentRetryQueue.Arn
      RawMessageDelivery: true
      TopicArn:
        Fn::ImportValue: !Sub "ent:${Environment}:payment-retry-sns-topic"
  
Outputs:
  BillingApi:
    Description: "API Gateway endpoint URL"
    Value: !Sub "https://${ServerlessRestApi}.execute-api.${AWS::Region}.amazonaws.com/Prod"